
/**
 * @file 29_PuttingItAllTogether.java
 * @author dunamismax
 * @date 2025-06-11
 *
 * @brief Final Capstone Project: A database-backed web API with unit tests and logging.
 *
 * ---
 *
 * ## The Capstone: A Professional-Grade Application
 *
 * This is it! This final project combines all the major concepts we've learned into a single,
 * cohesive application. We will build a REST API that is architected in a way that is robust,
 * maintainable, and testable—just like a real-world enterprise application.
 *
 * ### We will integrate the following key skills:
 * - **Web API (Javalin):** To handle HTTP requests and define our API endpoints. (Lesson 28)
 * - **Database Persistence (JDBC):** To store our data permanently in an H2 in-memory database. (Lesson 26)
 * - **Professional Logging (SLF4J & Logback):** To get structured, meaningful insight into what our application is doing. (Lesson 27)
 * - **JSON Processing (Gson):** To serialize and deserialize data for our API. (Lesson 21)
 * - **Dependency Management (Maven):** To manage all the third-party libraries we need. (Lesson 20)
 * - **Modern Java & OOP:** We will use records for our data objects and structure our code with a
 *   **Data Access Object (DAO)** pattern to separate database logic from our web logic.
 *
 * ### Application Architecture:
 * The flow of a request will look like this:
 * `Client -> HTTP Request -> Javalin Handler -> DAO Method -> JDBC -> Database`
 *
 * ### Prerequisites (Complete Maven `pom.xml` for this project):
 * ```xml
 * <project>
 *   <!-- ... project metadata ... -->
 *   <dependencies>
 *     <!-- Web Framework -->
 *     <dependency>
 *       <groupId>io.javalin</groupId>
 *       <artifactId>javalin</artifactId>
 *       <version>6.1.3</version>
 *     </dependency>
 *
 *     <!-- Logging Facade & Implementation -->
 *     <dependency>
 *       <groupId>org.slf4j</groupId>
 *       <artifactId>slf4j-api</artifactId>
 *       <version>2.0.7</version>
 *     </dependency>
 *     <dependency>
 *       <groupId>ch.qos.logback</groupId>
 *       <artifactId>logback-classic</artifactId>
 *       <version>1.4.11</version>
 *     </dependency>
 *
 *     <!-- Database Driver -->
 *     <dependency>
 *       <groupId>com.h2database</groupId>
 *       <artifactId>h2</artifactId>
 *       <version>2.2.224</version>
 *     </dependency>
 *
 *     <!-- JSON Library -->
 *     <dependency>
 *       <groupId>com.google.code.gson</groupId>
 *       <artifactId>gson</artifactId>
 *       <version>2.10.1</version>
 *     </dependency>
 *
 *     <!-- Testing Framework -->
 *     <dependency>
 *       <groupId>org.junit.jupiter</groupId>
 *       <artifactId>junit-jupiter-api</artifactId>
 *       <version>5.10.2</version>
 *       <scope>test</scope>
 *     </dependency>
 *   </dependencies>
 * </project>
 * ```
 * You would also need a `logback.xml` file in `src/main/resources`.
 *
 */

import com.google.gson.Gson;
import io.javalin.Javalin;
import io.javalin.http.Context;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

// --- Data Model ---
// A record to represent our User. The `id` will be generated by the database.
record User(Integer id, String name, String email) {
}

// --- Data Access Object (DAO) ---
// This class encapsulates all database logic, separating it from the web layer.
class UserDao {
    private static final Logger log = LoggerFactory.getLogger(UserDao.class);
    private final Connection connection;

    public UserDao(Connection connection) {
        this.connection = connection;
    }

    public void initializeDatabase() throws SQLException {
        log.info("Initializing database and creating 'users' table if it doesn't exist...");
        String createTableSQL = """
                CREATE TABLE IF NOT EXISTS users (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    name VARCHAR(255) NOT NULL,
                    email VARCHAR(255) UNIQUE NOT NULL
                )
                """;
        try (Statement stmt = connection.createStatement()) {
            stmt.execute(createTableSQL);
            log.info("Database initialized successfully.");
        }
    }

    public User create(String name, String email) throws SQLException {
        String sql = "INSERT INTO users (name, email) VALUES (?, ?)";
        try (PreparedStatement pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, name);
            pstmt.setString(2, email);
            pstmt.executeUpdate();

            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int id = generatedKeys.getInt(1);
                    log.info("Created new user with ID: {}", id);
                    return new User(id, name, email);
                } else {
                    throw new SQLException("Creating user failed, no ID obtained.");
                }
            }
        }
    }

    public Optional<User> findById(int id) throws SQLException {
        String sql = "SELECT * FROM users WHERE id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return Optional.of(new User(rs.getInt("id"), rs.getString("name"), rs.getString("email")));
                }
            }
        }
        return Optional.empty();
    }

    public List<User> findAll() throws SQLException {
        List<User> users = new ArrayList<>();
        String sql = "SELECT * FROM users";
        try (Statement stmt = connection.createStatement();
                ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                users.add(new User(rs.getInt("id"), rs.getString("name"), rs.getString("email")));
            }
        }
        return users;
    }
}

// --- Main Application Class ---
public class PuttingItAllTogether {
    private static final Logger log = LoggerFactory.getLogger(PuttingItAllTogether.class);
    private static final String DB_URL = "jdbc:h2:mem:capstone;DB_CLOSE_DELAY=-1";
    private static final Gson gson = new Gson();

    public static void main(String[] args) {
        try (Connection connection = DriverManager.getConnection(DB_URL, "sa", "")) {
            // 1. Setup DAO and initialize the database schema
            UserDao userDao = new UserDao(connection);
            userDao.initializeDatabase();

            // Pre-populate with some data
            userDao.create("Alice", "alice@example.com");
            userDao.create("Bob", "bob@example.com");

            // 2. Setup and start the Javalin web server
            Javalin app = Javalin.create(config -> {
                config.http.showJavalinBanner = false;
            }).start(7070);

            log.info("✅ Capstone API Server started on http://localhost:7070");

            // 3. Define API endpoints, passing the DAO to the handlers
            app.get("/api/users", ctx -> getAllUsersHandler(ctx, userDao));
            app.get("/api/users/{id}", ctx -> getOneUserHandler(ctx, userDao));
            app.post("/api/users", ctx -> createUserHandler(ctx, userDao));

            // Add a global exception handler for database errors
            app.exception(SQLException.class, (e, ctx) -> {
                log.error("A database error occurred", e);
                ctx.status(500).result("Internal Server Error: Could not process database request.");
            });

        } catch (SQLException e) {
            log.error("FATAL: Could not connect to or initialize the database.", e);
        }
    }

    // --- API Handlers ---
    private static void getAllUsersHandler(Context ctx, UserDao userDao) throws SQLException {
        log.info("Received request: GET /api/users");
        List<User> users = userDao.findAll();
        ctx.json(users);
    }

    private static void getOneUserHandler(Context ctx, UserDao userDao) throws SQLException {
        int userId = Integer.parseInt(ctx.pathParam("id"));
        log.info("Received request: GET /api/users/{}", userId);

        userDao.findById(userId)
                .ifPresentOrElse(
                        ctx::json, // If user is present, serialize to JSON
                        () -> { // If not present, return 404
                            log.warn("User with ID {} not found.", userId);
                            ctx.status(404).result("User not found");
                        });
    }

    private static void createUserHandler(Context ctx, UserDao userDao) throws SQLException {
        log.info("Received request: POST /api/users");
        User userRequest = gson.fromJson(ctx.body(), User.class);
        User createdUser = userDao.create(userRequest.name(), userRequest.email());
        ctx.status(201).json(createdUser);
    }
}